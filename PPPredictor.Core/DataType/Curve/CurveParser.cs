using PPPredictor.Core.Interface;
using System.Collections.Generic;
using static PPPredictor.Core.DataType.Enums;

namespace PPPredictor.Core.DataType.Curve
{
    class CurveParser
    {
        private static readonly double basePPMultiplierScoreSaber = 42.117208413;
        private static readonly List<(double, double)> arrPPCurveScoreSaber = new List<(double, double)>(new (double, double)[37] {
            (1.0, 5.367394282890631),
            (0.9995, 5.019543595874787),
            (0.999, 4.715470646416203),
            (0.99825, 4.325027383589547),
            (0.9975, 3.996793606763322),
            (0.99625, 3.5526145337555373),
            (0.995, 3.2022017597337955),
            (0.99375, 2.9190155639254955),
            (0.9925, 2.685667856592722),
            (0.99125, 2.4902905794106913),
            (0.99, 2.324506282149922),
            (0.9875, 2.058947159052738),
            (0.985, 1.8563887693647105),
            (0.9825, 1.697536248647543),
            (0.98, 1.5702410055532239),
            (0.9775, 1.4664726399289512),
            (0.975, 1.3807102743105126),
            (0.9725, 1.3090333065057616),
            (0.97, 1.2485807759957321),
            (0.965, 1.1552120359501035),
            (0.96, 1.0871883573850478),
            (0.955, 1.0388633331418984),
            (0.95, 1.0),
            (0.94, 0.9417362980580238),
            (0.93, 0.9039994071865736),
            (0.92, 0.8728710341448851),
            (0.91, 0.8488375988124467),
            (0.9, 0.825756123560842),
            (0.875, 0.7816934560296046),
            (0.85, 0.7462290664143185),
            (0.825, 0.7150465663454271),
            (0.8, 0.6872268862950283),
            (0.75, 0.6451808210101443),
            (0.7, 0.6125565959114954),
            (0.65, 0.5866010012767576),
            (0.6, 0.18223233667439062),
            (0.0, 0.0) });
        private static readonly List<(double, double)> arrPPCurveAccSaber = new List<(double, double)>(new (double, double)[57] {
            (1, 1),
            (0.999798868015323, 1),
            (0.998801667612258, 0.881036259003904),
            (0.997597817448282, 0.807864970846212),
            (0.99638391362715, 0.75398939205533),
            (0.995192826072399, 0.711631856844816),
            (0.993982635397878, 0.675758283217714),
            (0.992777934371917, 0.645271361873838),
            (0.991572321617314, 0.618720490847344),
            (0.990361642931305, 0.595172789623826),
            (0.989158767583543, 0.574249679995056),
            (0.987946216049906, 0.555191831755976),
            (0.986753843546214, 0.538101879298717),
            (0.985534556510679, 0.522047289016481),
            (0.984334431588307, 0.507436997518391),
            (0.983122724803697, 0.493713431180267),
            (0.981930401543003, 0.481080710912171),
            (0.980712192241952, 0.468949988213597),
            (0.979514528967426, 0.457693261261058),
            (0.978307874266188, 0.446942167537732),
            (0.977108280868104, 0.436772954869709),
            (0.975901793480846, 0.427008348566038),
            (0.974689649744553, 0.417614336191856),
            (0.973487723323, 0.408667608162045),
            (0.972282442566079, 0.400025710310081),
            (0.971075080678785, 0.39166641973516),
            (0.9698668993297, 0.383569905983769),
            (0.968659134866764, 0.37571839822792),
            (0.967452986936859, 0.368095908419736),
            (0.96624960935703, 0.360687999490072),
            (0.965050103040447, 0.353481590071579),
            (0.963842342827163, 0.346388277643642),
            (0.96262795728598, 0.339405506964074),
            (0.961433998563471, 0.33267290950433),
            (0.96022316288647, 0.325967205856964),
            (0.95902216724236, 0.319426258587104),
            (0.957807698698665, 0.312913179773458),
            (0.956605438149408, 0.306556377051107),
            (0.955404451612776, 0.300287818697188),
            (0.954194718585367, 0.29404782746237),
            (0.952989233017565, 0.287896269816159),
            (0.951778352488454, 0.281776901969062),
            (0.950574437220297, 0.275745429410847),
            (0.949368212787461, 0.269748820334489),
            (0.948161368969195, 0.263789713483043),
            (0.946965275751128, 0.257918189085454),
            (0.945752195005795, 0.251992953632337),
            (0.9445528451823, 0.246159054011439),
            (0.943340858876901, 0.240283202722378),
            (0.942136498435854, 0.234458953551446),
            (0.940932458185028, 0.228646177461935),
            (0.939722349385998, 0.222809528908169),
            (0.938524585132052, 0.217033357984317),
            (0.937316865437844, 0.211205733205298),
            (0.936109641452604, 0.205372691403391),
            (0.934905010658402, 0.199540078052735),
            (0, 0) });
        public static IPPPCurve ParseToCurve(CurveInfo curveInfo)
        {
            switch (curveInfo.CurveType)
            {
                case CurveType.ScoreSaber:
                    return new CustomPPPCurve(arrPPCurveScoreSaber, CurveType.ScoreSaber, basePPMultiplierScoreSaber);
                case CurveType.BeatLeader:
                    return new BeatLeaderPPPCurve();
                case CurveType.Linear:
                    return new CustomPPPCurve(curveInfo.ArrPPCurve, CurveType.Linear, curveInfo.BasePPMultiplier.GetValueOrDefault());
                case CurveType.Basic:
                    return CustomPPPCurve.CreateBasicPPPCurve(curveInfo.BasePPMultiplier.GetValueOrDefault(), curveInfo.Baseline, curveInfo.Exponential, curveInfo.Cutoff);
                case CurveType.AccSaber:
                    return new CustomPPPCurve(arrPPCurveAccSaber, CurveType.AccSaber, 61, starOffest: 18);
                default:
                    return CustomPPPCurve.CreateDummyPPPCurve();
            }
        }
    }
}
